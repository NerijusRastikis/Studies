// <auto-generated />
using System;
using Apartments;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Apartments.Migrations
{
    [DbContext(typeof(ApartmentsContext))]
    partial class ApartmentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApartmentClient", b =>
                {
                    b.Property<int>("ApartmentsApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ClientsClientId")
                        .HasColumnType("int");

                    b.HasKey("ApartmentsApartmentId", "ClientsClientId");

                    b.HasIndex("ClientsClientId");

                    b.ToTable("ApartmentClient");
                });

            modelBuilder.Entity("ApartmentFacilities", b =>
                {
                    b.Property<int>("ApartmentsApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FacilitiesId")
                        .HasColumnType("int");

                    b.HasKey("ApartmentsApartmentId", "FacilitiesId");

                    b.HasIndex("FacilitiesId");

                    b.ToTable("ApartmentFacilities");
                });

            modelBuilder.Entity("ApartmentServices", b =>
                {
                    b.Property<int>("ApartmentsApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("ApartmentsApartmentId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ApartmentServices");
                });

            modelBuilder.Entity("Apartments.Entities.Apartment", b =>
                {
                    b.Property<int>("ApartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApartmentId"));

                    b.Property<decimal>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApartmentId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("Apartments.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalCode")
                        .HasColumnType("int");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Apartments.Entities.Facilities", b =>
                {
                    b.Property<int>("FacilitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilitiesId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacilitiesId");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            FacilitiesId = 1,
                            Title = "Dusas"
                        },
                        new
                        {
                            FacilitiesId = 2,
                            Title = "Internetas"
                        },
                        new
                        {
                            FacilitiesId = 3,
                            Title = "Papildoma patalyne"
                        },
                        new
                        {
                            FacilitiesId = 4,
                            Title = "Alkoholinis bariukas"
                        },
                        new
                        {
                            FacilitiesId = 5,
                            Title = "Saldumynu bariukas"
                        });
                });

            modelBuilder.Entity("Apartments.Entities.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstitutionId"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstitutionId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Apartments.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Apartments.Entities.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Apartments.Entities.Services", b =>
                {
                    b.Property<int>("ServicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicesId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicesId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServicesId = 1,
                            Price = 3.50m,
                            Title = "Zadintuvas ryte"
                        },
                        new
                        {
                            ServicesId = 2,
                            Price = 10m,
                            Title = "Maistas i kambari"
                        },
                        new
                        {
                            ServicesId = 3,
                            Price = 50m,
                            Title = "Masazas"
                        },
                        new
                        {
                            ServicesId = 4,
                            Price = 35m,
                            Title = "Papildomas (vizito metu) kambario tvarkymas"
                        },
                        new
                        {
                            ServicesId = 5,
                            Price = 15m,
                            Title = "Stalo zaidimu komplekto pristatymas i kambari"
                        },
                        new
                        {
                            ServicesId = 6,
                            Price = 20m,
                            Title = "Papildoma isskleidziama lova (ugiui iki 150 cm)"
                        });
                });

            modelBuilder.Entity("ApartmentClient", b =>
                {
                    b.HasOne("Apartments.Entities.Apartment", null)
                        .WithMany()
                        .HasForeignKey("ApartmentsApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apartments.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentFacilities", b =>
                {
                    b.HasOne("Apartments.Entities.Apartment", null)
                        .WithMany()
                        .HasForeignKey("ApartmentsApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apartments.Entities.Facilities", null)
                        .WithMany()
                        .HasForeignKey("FacilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentServices", b =>
                {
                    b.HasOne("Apartments.Entities.Apartment", null)
                        .WithMany()
                        .HasForeignKey("ApartmentsApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apartments.Entities.Services", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Apartments.Entities.Apartment", b =>
                {
                    b.HasOne("Apartments.Entities.Institution", "Institution")
                        .WithMany("Apartments")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Apartments.Entities.Institution", b =>
                {
                    b.HasOne("Apartments.Entities.Owner", "Owner")
                        .WithOne("Institution")
                        .HasForeignKey("Apartments.Entities.Institution", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apartments.Entities.Place", "Place")
                        .WithMany("Institutions")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Apartments.Entities.Institution", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("Apartments.Entities.Owner", b =>
                {
                    b.Navigation("Institution")
                        .IsRequired();
                });

            modelBuilder.Entity("Apartments.Entities.Place", b =>
                {
                    b.Navigation("Institutions");
                });
#pragma warning restore 612, 618
        }
    }
}
